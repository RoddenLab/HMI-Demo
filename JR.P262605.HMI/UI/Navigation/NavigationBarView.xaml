<Window x:Class="JR.P262605.HMI.UI.Navigation.NavigationBarView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:local="clr-namespace:JR.P262605.HMI.UI.Navigation"
        xmlns:c="clr-namespace:JR.P262605.HMI.UI.Convert"
        mc:Ignorable="d" 
        Height="1024" 
        Width="1280"
        ResizeMode="NoResize"
        WindowStyle="None"
        WindowState="Maximized"
        WindowStartupLocation="CenterScreen"
        d:DataContext="{d:DesignInstance Type=local:NavigationBarViewModel}">

    <Window.Resources>
        <c:AliceBlueActiveBackground x:Key="AliceBlueActiveBackground"/>

        <Style TargetType="TextBlock">
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="TextAlignment" Value="Center"/>
        </Style>

        <Style TargetType="Label">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>

        <Style TargetType="ToggleButton" BasedOn="{StaticResource BaseButtonStyle}">
            <Style.Triggers>
                <Trigger Property="AllowDrop" Value="True">
                    <Setter Property="Background" Value="CornflowerBlue"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="NavButton" BasedOn="{StaticResource BaseButtonStyle}">
            <Style.Triggers>
                <Trigger Property="AllowDrop" Value="True">
                    <Setter Property="Background" Value="CornflowerBlue"/>
                </Trigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>
    
    
    <Grid Margin="3">
        <Grid.RowDefinitions>
            <RowDefinition Height="75"/>
            <RowDefinition Height="3"/>
            <RowDefinition Height="75"/>
            <RowDefinition Height="3"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="3"/>
            <RowDefinition Height="75"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>


        <Button Grid.Row="0" Grid.Column="0" Command="{Binding CommandExit}">
            <TextBlock Text="Exit" />
        </Button>

        <Label Grid.Row="0" Grid.Column="2" BorderThickness="2" BorderBrush="Gray"
               AllowDrop="{Binding Model.RemoteMode}">
            <Label.Style>
                <Style TargetType="Label" BasedOn="{StaticResource BaseLabel}">
                    <Setter Property="Background" Value="LightGray"/>
                    <Style.Triggers>
                        <Trigger Property="AllowDrop" Value="True">
                            <Setter Property="Background" Value="LightYellow"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Label.Style>
            <TextBlock FontSize="16" TextWrapping="Wrap" Text="{Binding Model.GEMState, FallbackValue=HostOffline}"/>
        </Label>
            
        <Label Grid.Row="0" Grid.Column="4" Grid.ColumnSpan="13" BorderThickness="2" BorderBrush="Gray"
               AllowDrop="{Binding Model.FaultAlert}">
            <Label.Style>
                <Style TargetType="Label" BasedOn="{StaticResource BaseLabel}">
                    <Setter Property="Background" Value="White"/>
                    <Style.Triggers>
                        <Trigger Property="AllowDrop" Value="True">
                            <Setter Property="Background" Value="Red"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Label.Style>
            <TextBlock FontSize="22" FontWeight="Bold"
                       Text="{Binding Path=Model.OperatorMessage, FallbackValue='Station Banner Message'}"
                       AllowDrop="{Binding Model.FaultAlert}">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Foreground" Value="Black"/>
                        <Style.Triggers>
                            <Trigger Property="AllowDrop" Value="True">
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Label>
        
        <Label Grid.Row="0" Grid.Column="18" Grid.ColumnSpan="3" Background="Black">
            <TextBlock Foreground="White" Text="{Binding Model.StationStateMessage, FallbackValue='Unknown State'}"/>
        </Label>

        <Button Grid.Row="2" Grid.Column="0" Background="Lime" 
                Command="{Binding Path=CommandCycleStart}" 
                IsEnabled="{Binding Path=Model.OKToStart, FallbackValue=False}"
                Visibility="{Binding Model.ShowStart, Converter={StaticResource bool2VisibilityConverter}}">
            <TextBlock  Text="Cycle Start" />
        </Button>

        <Button Grid.Row="2" Grid.Column="2" Background="Red"
                Command="{Binding Path=CommandCycleStop}"
                IsEnabled="{Binding Model.OKToStop}"
                Visibility="{Binding Model.ShowStop, Converter={StaticResource bool2VisibilityConverter}}">
            <TextBlock Foreground="White" Text="Cycle Stop" />
        </Button>
            
        <Button Grid.Row="2" Grid.Column="4"
                Command="{Binding Path=CommandCycleManual}"
                IsEnabled="{Binding Path=Model.OKForManual, FallbackValue=False}">
            <TextBlock Text="Cycle Manual" />
        </Button>
            
        <Button Grid.Row="2" Grid.Column="6"
                Command="{Binding Path=CommandFaultAcknowledge}">
            <TextBlock Text="Fault Ack" />
        </Button>

        <Button Grid.Row="2" Grid.Column="8" Background="Yellow"
                IsEnabled="{Binding Model.OKToReset}"
                Command="{Binding Path=CommandStationReset}">
            <TextBlock Text="Fault Reset" />
        </Button>

        <Button Grid.Row="2" Grid.Column="18"
                Style="{StaticResource NavButton}"
                Command="{Binding Path=CommandUpdatePage}" CommandParameter="Main"
                AllowDrop="{Binding MainScreenActive}">
            <TextBlock Text="Operator Controls" />
        </Button>

        <Button Grid.Row="2" Grid.Column="20"
                Style="{StaticResource NavButton}"
                Command="{Binding Path=CommandUpdatePage}" CommandParameter="Operator"
                AllowDrop="{Binding OperatorScreenActive}">
            <TextBlock Text="Manual Controls" />
        </Button>

        <UserControl Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="21" Content="{Binding ActiveScreen}"/>

        <ToggleButton Grid.Row="6" Grid.Column="20" 
                      IsChecked="{Binding Model.hiLockDoorRequest, FallbackValue=false}"
                      AllowDrop="{Binding Model.oGuardDoorLock}">
            <TextBlock Text="Operator Door Lock"/>
        </ToggleButton>

        <ToggleButton Grid.Row="6" Grid.Column="18" 
                      IsChecked="{Binding Model.hiCloseLoadDoor, FallbackValue=false}"
                      AllowDrop="{Binding Model.oLoadDoorLock}">
            <TextBlock Text="Close Load Door"/>
        </ToggleButton>

        <ToggleButton Grid.Row="6" Grid.Column="16"
                      IsChecked="{Binding Model.StageLightCommand, FallbackValue=false}"
                      AllowDrop="{Binding Model.oStageLightCommand}">
            <TextBlock Text="Stage Light"/>
        </ToggleButton>

        <Button Grid.Row="6" Grid.Column="0" 
                Command="{Binding CassetteDataEditorCommand}">
            <TextBlock Text="Cassette Creator"/>
        </Button>

        <Button Grid.Row="6" Grid.Column="2" 
                Command="{Binding RecipeEditorCommand}">
            <TextBlock Text="Recipe Editor"/>
        </Button>
    </Grid>
</Window>
